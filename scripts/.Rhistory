panel.grid.major = element_blank()
) +
geom_text(aes(label = p_value_label, x = upper_ci), hjust = -0.3) +  # P-value text
facet(~Cohort)
p=ggplot(df_sur, aes(x = hazard_ratio, y = term)) +
geom_point(shape = 15) +  # Square point to match original
geom_errorbarh(aes(xmin = lower_ci, xmax = upper_ci), height = 0.2) +
geom_vline(xintercept = 1, linetype = "dotted") +  # Reference line at HR = 1
labs(
title = fig_title,
x = "Hazard Ratio",
y = NULL
) +
theme_minimal() +expand_limits(x = xlim)+
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()
) +
geom_text(aes(label = p_value_label, x = upper_ci), hjust = -0.3) +  # P-value text
facet_grid(~Cohort)
p
p=ggplot(df_sur, aes(x = hazard_ratio, y = term)) +
geom_point(shape = 15) +  # Square point to match original
geom_errorbarh(aes(xmin = lower_ci, xmax = upper_ci), height = 0.2) +
geom_vline(xintercept = 1, linetype = "dotted") +  # Reference line at HR = 1
labs(
title = fig_title,
x = "Hazard Ratio",
y = NULL
) +
theme_minimal() +expand_limits(x = xlim)+
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()
) +
geom_text(aes(label = p_value_label, x = upper_ci), hjust = -0.3) +  # P-value text
facet_grid(~Cohort,scales='free_x')
p
xlim
p=ggplot(df_sur, aes(x = hazard_ratio, y = term)) +
geom_point(shape = 15) +  # Square point to match original
geom_errorbarh(aes(xmin = lower_ci, xmax = upper_ci), height = 0.2) +
geom_vline(xintercept = 1, linetype = "dotted") +  # Reference line at HR = 1
labs(
title = fig_title,
x = "Hazard Ratio",
y = NULL
) +
theme_minimal() + #expand_limits(x = xlim)+
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()
) +
geom_text(aes(label = p_value_label, x = upper_ci), hjust = -0.3) +  # P-value text
facet_grid(~Cohort,scales='free_x')
p
p=ggplot(df_sur, aes(x = hazard_ratio, y = term)) +
geom_point(shape = 15) +  # Square point to match original
geom_errorbarh(aes(xmin = lower_ci, xmax = upper_ci), height = 0.2) +
geom_vline(xintercept = 1, linetype = "dotted") +  # Reference line at HR = 1
labs(
title = fig_title,
x = "Hazard Ratio",
y = NULL
) +
theme_minimal() + expand_limits(x = 20)+
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()
) +
geom_text(aes(label = p_value_label, x = upper_ci), hjust = -0.3) +  # P-value text
facet_grid(~Cohort,scales='free_x')
p
df_sur$term
df_sur$term[which(df_sur$term=='Sexmale')]='SexM'
p=ggplot(df_sur, aes(x = hazard_ratio, y = term)) +
geom_point(shape = 15) +  # Square point to match original
geom_errorbarh(aes(xmin = lower_ci, xmax = upper_ci), height = 0.2) +
geom_vline(xintercept = 1, linetype = "dotted") +  # Reference line at HR = 1
labs(
title = fig_title,
x = "Hazard Ratio",
y = NULL
) +
theme_minimal() + expand_limits(x = 20)+
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()
) +
geom_text(aes(label = p_value_label, x = upper_ci), hjust = -0.3) +  # P-value text
facet_grid(~Cohort,scales='free_x')
p
df_sur
df_sur$p_label='ns'
df_sur$p_label[which(df_sur$p_value_label<=0.05)]='*'
df_sur$p_label[which(df_sur$p_value_label<=0.01)]='**'
df_sur$p_label[which(df_sur$p_value_label<=0.001)]='***'
p=ggplot(df_sur, aes(x = hazard_ratio, y = term)) +
geom_point(shape = 15) +  # Square point to match original
geom_errorbarh(aes(xmin = lower_ci, xmax = upper_ci), height = 0.2) +
geom_vline(xintercept = 1, linetype = "dotted") +  # Reference line at HR = 1
labs(
title = fig_title,
x = "Hazard Ratio",
y = NULL
) +
theme_minimal() + expand_limits(x = 20)+
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()
) +
geom_text(aes(label = p_label, x = upper_ci), hjust = -0.3) +  # P-value text
facet_grid(~Cohort,scales='free_x')
p
df_sur$Cohort
df_sur$Cohort=factor(df_sur$Cohort,c("TCGA HNSC OS","Foy et al. OS","Foy et al. PFS","INSPIRE OS","INSPIRE PFS"))
p=ggplot(df_sur, aes(x = hazard_ratio, y = term)) +
geom_point(shape = 15) +  # Square point to match original
geom_errorbarh(aes(xmin = lower_ci, xmax = upper_ci), height = 0.2) +
geom_vline(xintercept = 1, linetype = "dotted") +  # Reference line at HR = 1
labs(
title = fig_title,
x = "Hazard Ratio",
y = NULL
) +
theme_minimal() + expand_limits(x = 20)+
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank()
) +
geom_text(aes(label = p_label, x = upper_ci), hjust = -0.3) +  # P-value text
facet_grid(~Cohort,scales='free_x')
p
ggsave(file.path(outdir,paste0('cox_hr','.pdf')),p,width = 6,height = 3)
library(slingshot)
library(ggplot2)
library(Seurat)
library(reshape)
library(ggpubr)
library('cutpointr')
#library(immunarch)
## ------- Inputs and parameters -------
cd8_t_obj=readRDS('/Volumes/Binbin_Kun/binbin/silvio/results/seurat/tcell/cd8/res0.2/annotated_seurat_res0.2.rds')
tcr_meta=read.delim('../data/sc_tcr_meta.txt')
teff_subtype_average_clone_size=read.delim('../data/teff_subtype_average_clone_size.txt')
teff_subtype_extend_clone_fre=read.delim('../data/teff_subtype_extend_clone_fre.txt')
bulk_tcr_div_inv_simp=read.delim('../data/bulk_tcr_div_inv_simp.txt')
bulk_bcr_div_inv_simp=read.delim('../data/bulk_bcr_div_inv_simp.txt')
cd4_tcr_meta=read.delim('../data/sc_cd4_tcr_meta.txt')
patient_meta=read.delim('../data/LiBIO_scRNA_sample_Summary_metrics.txt')
## Outputs
outdir='../results/figure2'
if (!dir.exists(outdir)){
dir.create(outdir,recursive = T)
}
## Single cell TCR
df_score=teff_subtype_average_clone_size
View(df_score)
library(ggplot2)
library(Seurat)
library(reshape)
library(ggpubr)
library('cutpointr')
#library(immunarch)
## ------- Inputs and parameters -------
cd8_t_obj=readRDS('/Volumes/Binbin_Kun/binbin/silvio/results/seurat/tcell/cd8/res0.2/annotated_seurat_res0.2.rds')
tcr_meta=read.delim('../data/sc_tcr_meta.txt')
teff_subtype_average_clone_size=read.delim('../data/teff_subtype_average_clone_size.txt')
teff_subtype_extend_clone_fre=read.delim('../data/teff_subtype_extend_clone_fre.txt')
bulk_tcr_div_inv_simp=read.delim('../data/bulk_tcr_div_inv_simp.txt')
bulk_bcr_div_inv_simp=read.delim('../data/bulk_bcr_div_inv_simp.txt')
cd4_tcr_meta=read.delim('../data/sc_cd4_tcr_meta.txt')
patient_meta=read.delim('../data/LiBIO_scRNA_sample_Summary_metrics.txt')
sample_average_clone_size=read.delim('../data/subtype_average_clone_size.txt')
View(teff_subtype_average_clone_size)
View(sample_average_clone_size)
sample_average_clone_size=read.delim('../data/sample_average_clone_size.txt')
View(sample_average_clone_size)
## Calculate AUC with single cell Tem TCR data
df=sample_average_clone_size
df$treatment='aPD1'
df$Response=ifelse(df$Response=='Responders','1',"0")
head(df)
df$Response=ifelse(df$group=='responder','1',"0")
sc_auc=cal_auc_odd(df,score_col='mean_clone_size',response_col='Response',group_col='treatment',timepoint_col='timepoint')
## ------- Calculate AUC with T and B cell expansion index -------
## Functions
cal_auc_odd=function(df,score_col,response_col,group_col,timepoint_col){
df=df[,c(score_col,response_col,group_col,timepoint_col)]
colnames(df)=c('score','Response','group','timepoint')
pred_res=data.frame()
for (i in unique(df$group)){
for (j in unique(df$timepoint)){
tmp_df=df[which(df$group==i&df$timepoint==j),]
if (length(unique(tmp_df$Response))==2){
opt_cut <- cutpointr(tmp_df, score, Response, direction = ">=", pos_class = "1",
neg_class = "0", method = maximize_metric, metric = sum_sens_spec)
opt_cut$group=i
opt_cut$timepoint=j
pred_res=rbind(pred_res,opt_cut)
}
}
}
return(pred_res)
}
bulk_tcr_auc=cal_auc_odd(df,score_col='Value',response_col='Response',group_col='treatment',timepoint_col='timepoint')
sc_auc=cal_auc_odd(df,score_col='mean_clone_size',response_col='Response',group_col='treatment',timepoint_col='timepoint')
sc_auc
sc_allt_auc=cal_auc_odd(df,score_col='mean_clone_size',response_col='Response',group_col='treatment',timepoint_col='timepoint')
## Calculate AUC with single cell Tem TCR data
df=teff_subtype_average_clone_size
df$treatment='aPD1'
df$Response=ifelse(df$Response=='Responders','1',"0")
sc_auc=cal_auc_odd(df,score_col='mean_clone_size',response_col='Response',group_col='treatment',timepoint_col='timepoint')
## Calculate AUC with single cell Tem TCR data
df=sample_average_clone_size
df$treatment='aPD1'
df$Response=ifelse(df$group=='responder','1',"0")
sc_allt_auc=cal_auc_odd(df,score_col='mean_clone_size',response_col='Response',group_col='treatment',timepoint_col='timepoint')
## Calculate AUC with bulk TCR and BCR data
# TCR
df=bulk_tcr_div_inv_simp
df$treatment='aPD1'
df$Response=ifelse(df$Response=='Responders','1',"0")
bulk_tcr_auc=cal_auc_odd(df,score_col='Value',response_col='Response',group_col='treatment',timepoint_col='timepoint')
# BCR
df=bulk_bcr_div_inv_simp
df$treatment='aPD1'
df$Response=ifelse(df$Response=='Responders','1',"0")
bulk_bcr_auc=cal_auc_odd(df,score_col='Value',response_col='Response',group_col='treatment',timepoint_col='timepoint')
## plot AUC
sc_auc$Group='sc_Tem_TCR'
sc_allt_auc$Group='sc_all_Tcell_TCR'
bulk_tcr_auc$Group='bulk_TCR'
bulk_bcr_auc$Group='bulk_BCR'
df_plot=rbind(sc_auc,sc_allt_auc,bulk_tcr_auc,bulk_bcr_auc)
p = ggplot(data=df_plot, aes(x=timepoint, y=AUC, color=Group,fill=Group)) +
geom_bar(stat="identity", position=position_dodge(width = 0.9),width = 0.8,color="black")+
geom_text(aes(label=signif(AUC,2)), vjust=-1, color="black",
position = position_dodge(0.9), size=2.5)+
scale_fill_brewer(palette="Set2")+
#scale_color_brewer(palette="Dark2")+
theme_classic()
p
## Add sc All T cells
df_plot=rbind(sc_auc,sc_allt_auc,bulk_tcr_auc,bulk_bcr_auc)
p = ggplot(data=df_plot, aes(x=timepoint, y=AUC, color=Group,fill=Group)) +
geom_bar(stat="identity", position=position_dodge(width = 0.9),width = 0.8,color="black")+
geom_text(aes(label=signif(AUC,2)), vjust=-1, color="black",
position = position_dodge(0.9), size=2.5)+
scale_fill_brewer(palette="Set2")+
#scale_color_brewer(palette="Dark2")+
theme_classic()
p
ggsave(file.path(outdir,paste0('tcr','all_Tcell_auc_mouse.pdf')),p,width = 7,height = 3.5)
## Outputs
outdir='../results/figure2'
if (!dir.exists(outdir)){
dir.create(outdir,recursive = T)
}
p = ggplot(data=df_plot, aes(x=timepoint, y=AUC, color=Group,fill=Group)) +
geom_bar(stat="identity", position=position_dodge(width = 0.9),width = 0.8,color="black")+
geom_text(aes(label=signif(AUC,2)), vjust=-1, color="black",
position = position_dodge(0.9), size=2.5)+
scale_fill_brewer(palette="Set2")+
#scale_color_brewer(palette="Dark2")+
theme_classic()
p
ggsave(file.path(outdir,paste0('tcr','all_Tcell_auc_mouse.pdf')),p,width = 7,height = 3.5)
## ------- ROC curve for each timepoint -------
# Function
library(pROC)
library(RColorBrewer)
roc_plot=function(df_score){
df_plot=df_score[,c('filtered_t2_B cell','filtered_t2_Effector memory CD8','mean_score','Response')]
colnames(df_plot)=c('Sig_B','Sig_Teff','Comb_sig','Response')
# Create a list to store ROC curves
roc_list <- list(
Sig_B = pROC::roc(df_plot$Response, df_plot$Sig_B),
Sig_Teff = pROC::roc(df_plot$Response, df_plot$Sig_Teff),
Comb_sig = pROC::roc(df_plot$Response, df_plot$Comb_sig)
)
# Calculate AUC and update names
auc_values <- sapply(roc_list, auc)
names(roc_list) <- paste0(names(roc_list), " (AUC: ", round(auc_values, 2), ")")
# Define custom colors using a color palette
color_palette <- brewer.pal(n = length(roc_list), name = "Set1")
custom_colors <- setNames(color_palette, names(roc_list))
# Plot with ggroc and custom colors
p = ggroc(roc_list) +
ggtitle("ROC Curves with AUC Values") +
theme_classic2() +
labs(color = "Model") +
scale_color_manual(values = custom_colors) +
theme(
legend.position = "right",
text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
return(p)
}
#
comb_t="filtered_t2_Effector memory CD8"
comb_b="filtered_t2_B cell"
# Luoma dataset
sc_patient_icb=readRDS('../results/ICB_ML/datasets/patient_sc_dat.rds')
sc_luoma_pbmc_score=sig_score_func(expr_df=as.matrix(sc_patient_icb$Luoma_pbmc$Pseudobulk),meta=sc_patient_icb$Luoma_pbmc$meta,sig_ls=clean_sig_ls$human_sig_ls,comb_score = T,comb_t = comb_t,comb_b = comb_b)
## ------- F2A: UMAP of CD8 T cells -------
## Functions
tcr_umap=function(df,prefix){
tcr_meta_clone1=df[which(df$frequency==1),]
tcr_meta_clone_g1=df[which(df$frequency>1),]
sp2<-ggplot() +
geom_point(data = tcr_meta_clone1, aes(x=umap_1, y=umap_2, color=frequency),size=0.2)+
geom_point(data = tcr_meta_clone_g1, aes(x=umap_1, y=umap_2, color=frequency),size=0.2)+
#scale_color_gradient(low="#AED6F1", high="#FC4E07")+theme_classic()
scale_color_gradient(low="#66c2a5", high="#FC4E07")+theme_classic()
sp2
ggsave(file.path(outdir,paste0(prefix,'_clonetype.pdf')),sp2,width = 4.5,height = 3.5)
return(sp2)
}
## ======= Clonal expansion index (average clonotype size) across time points  =======
## Functions
# boxplot compare responders with non-responders
twogroup_boxplot=function(df,prefix, y_value,alternative='less'){
df$timepoint=factor(df$timepoint,c('1','2','3','4'))
df$Response=factor(df$Response,levels = c('Responders','Non-responders'))
p <- ggboxplot(df, x = "timepoint", y = y_value,
color = "Response", palette = "jco",
add = "jitter")
p = p + stat_compare_means(aes(group = Response),label = "p.signif",method = 'wilcox.test',method.args = list(alternative = alternative))+
xlab('Timepoints')
p
ggsave(file.path(outdir,paste0(prefix,'_tcr.pdf')),p,width = 6,height = 4)
return(p)
}
## ------- Calculate AUC with T and B cell expansion index -------
## Functions
cal_auc_odd=function(df,score_col,response_col,group_col,timepoint_col){
df=df[,c(score_col,response_col,group_col,timepoint_col)]
colnames(df)=c('score','Response','group','timepoint')
pred_res=data.frame()
for (i in unique(df$group)){
for (j in unique(df$timepoint)){
tmp_df=df[which(df$group==i&df$timepoint==j),]
if (length(unique(tmp_df$Response))==2){
opt_cut <- cutpointr(tmp_df, score, Response, direction = ">=", pos_class = "1",
neg_class = "0", method = maximize_metric, metric = sum_sens_spec)
opt_cut$group=i
opt_cut$timepoint=j
pred_res=rbind(pred_res,opt_cut)
}
}
}
return(pred_res)
}
roc_plot=function(df_score){
df_plot=df_score[,c('filtered_t2_B cell','filtered_t2_Effector memory CD8','mean_score','Response')]
colnames(df_plot)=c('Sig_B','Sig_Teff','Comb_sig','Response')
# Create a list to store ROC curves
roc_list <- list(
Sig_B = pROC::roc(df_plot$Response, df_plot$Sig_B),
Sig_Teff = pROC::roc(df_plot$Response, df_plot$Sig_Teff),
Comb_sig = pROC::roc(df_plot$Response, df_plot$Comb_sig)
)
# Calculate AUC and update names
auc_values <- sapply(roc_list, auc)
names(roc_list) <- paste0(names(roc_list), " (AUC: ", round(auc_values, 2), ")")
# Define custom colors using a color palette
color_palette <- brewer.pal(n = length(roc_list), name = "Set1")
custom_colors <- setNames(color_palette, names(roc_list))
# Plot with ggroc and custom colors
p = ggroc(roc_list) +
ggtitle("ROC Curves with AUC Values") +
theme_classic2() +
labs(color = "Model") +
scale_color_manual(values = custom_colors) +
theme(
legend.position = "right",
text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
return(p)
}
#
comb_t="filtered_t2_Effector memory CD8"
comb_b="filtered_t2_B cell"
# Luoma dataset
sc_patient_icb=readRDS('../results/ICB_ML/datasets/patient_sc_dat.rds')
df_score=teff_subtype_average_clone_size
bulk_tcr_div_inv_simp
bulk_bcr_div_inv_simp
## bulk TCR and BCR
tmp_tcr=bulk_tcr_div_inv_simp[,c('Sample','Value','timepoint','Response')]
tmp_bcr=bulk_bcr_div_inv_simp[,c('Sample','Value')]
colnames(tmp_tcr)[2]='TCR_clonality'
colnames(tmp_bcr)[2]='BCR_clonality'
df_score=merge(tmp_tcr,tmp_bcr,by='Sample')
unique(df_score$timepoint)
i=2
tmp_df_score=df_score[which(df_score$timepoint==i),]
# Create a list to store ROC curves
roc_list <- list(
TCR_clonality = pROC::roc(tmp_df_score$Response, tmp_df_score$TCR_clonality),
BCR_clonality = pROC::roc(tmp_df_score$Response, tmp_df_score$BCR_clonality)
)
# Calculate AUC and update names
auc_values <- sapply(roc_list, auc)
names(roc_list) <- paste0(names(roc_list), " (AUC: ", round(auc_values, 2), ")")
# Define custom colors using a color palette
# color_palette <- brewer.pal(n = length(roc_list), name = "Set2")
#color_palette = c("#66C2A5","#FC8D62")
color_palette = c("#E41A1C","#377EB8")
custom_colors <- setNames(color_palette, names(roc_list))
# Plot with ggroc and custom colors
p = ggroc(roc_list) +
ggtitle("Bulk RNAseq TCR and BCR") +
theme_classic() +
labs(color = "Model") +
scale_color_manual(values = custom_colors) +
theme(
legend.position = "right",
text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
p
## Single cell TCR
df_score=teff_subtype_average_clone_size
head(sample_average_clone_size)
## Single cell TCR of Tem
df_score=merge(teff_subtype_average_clone_size,sample_average_clone_size,by='sample_id')
View(df_score)
head(teff_subtype_average_clone_size)
## Single cell TCR of Tem and All T cells
tmp_df=teff_subtype_average_clone_size[,c('sample_id','mean_clone_size')]
colnames(tmp_df)
head(sample_average_clone_size)
colnames(sample_average_clone_size)
## Single cell TCR of Tem and All T cells
tmp_df=teff_subtype_average_clone_size[,c('sample_id','mean_clone_size')]
colnames(tmp_df)[2]='Tem_clone_size'
colnames(sample_average_clone_size)[1]='Tcell_clone_size'
df_score=merge(tmp_df,sample_average_clone_size,by='sample_id')
df_score$Response=ifelse(df_score$group=='responder','1','0')
i=2
tmp_df_score=df_score[which(df_score$timepoint==i),]
# Create a list to store ROC curves
roc_list <- list(
Tem_clonality = pROC::roc(tmp_df_score$Response, tmp_df_score$TCR_clonality),
Tcell_clonality = pROC::roc(tmp_df_score$Response, tmp_df_score$BCR_clonality)
)
# Create a list to store ROC curves
roc_list <- list(
Tem_clonality = pROC::roc(tmp_df_score$Response, tmp_df_score$Tem_clone_size),
Tcell_clonality = pROC::roc(tmp_df_score$Response, tmp_df_score$Tcell_clone_size)
)
# Calculate AUC and update names
auc_values <- sapply(roc_list, auc)
names(roc_list) <- paste0(names(roc_list), " (AUC: ", round(auc_values, 2), ")")
# Define custom colors using a color palette
# color_palette <- brewer.pal(n = length(roc_list), name = "Set2")
#color_palette = c("#66C2A5","#FC8D62")
color_palette = c("#4DAF4A","#E78AC3")
custom_colors <- setNames(color_palette, names(roc_list))
# Plot with ggroc and custom colors
p = ggroc(roc_list) +
ggtitle("Bulk RNAseq TCR and BCR") +
theme_classic() +
labs(color = "Model") +
scale_color_manual(values = custom_colors) +
theme(
legend.position = "right",
text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
p
for (i in unique(df_score$timepoint)){
tmp_df_score=df_score[which(df_score$timepoint==i),]
# Create a list to store ROC curves
roc_list <- list(
Tem_clonality = pROC::roc(tmp_df_score$Response, tmp_df_score$Tem_clone_size),
Tcell_clonality = pROC::roc(tmp_df_score$Response, tmp_df_score$Tcell_clone_size)
)
# Calculate AUC and update names
auc_values <- sapply(roc_list, auc)
names(roc_list) <- paste0(names(roc_list), " (AUC: ", round(auc_values, 2), ")")
# Define custom colors using a color palette
# color_palette <- brewer.pal(n = length(roc_list), name = "Set2")
#color_palette = c("#66C2A5","#FC8D62")
color_palette = c("#4DAF4A","#E78AC3")
custom_colors <- setNames(color_palette, names(roc_list))
# Plot with ggroc and custom colors
p = ggroc(roc_list) +
ggtitle("Bulk RNAseq TCR and BCR") +
theme_classic() +
labs(color = "Model") +
scale_color_manual(values = custom_colors) +
theme(
legend.position = "right",
text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
)
p
ggsave(file.path(outdir,paste0('ROC_AUC_Tem_Tcell',i,'.pdf')),width = 5,height = 3)
}
